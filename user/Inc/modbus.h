/*
 * modbus.h
 *
 *  Created on: 25.08.2015
 *      Author: sagok
 *
 * Сообщение должно начинаться и заканчиваться интервалом тишины, длительностью не менее 3,5 символов.
 * Во время передачи сообщения не должно быть пауз длительностью более 1,5 символов.
 * Для скоростей более 19200 бод допускается использовать интервалы 1,75 и 0,75 мс, соответственно.
 *
 * ________________________________________________________________________________________________
 * адрес ведомого (подчинённого) устройства	|	код функции	|	данные	|	блок обнаружения ошибок
 * ------------------------------------------------------------------------------------------------
 * адрес ведомого устройства — адрес подчинённого устройства, к которому адресован запрос. Ведомые устройства отвечают только на запросы, поступившие в их адрес.
 * Ответ также начинается с адреса отвечающего ведомого устройства, который может изменяться от 1 до 247.
 * Адрес 0 используется для широковещательной передачи, его распознаёт каждое устройство, адреса в диапазоне 248…255 — зарезервированы;
 *
 * код функции — это следующее однобайтное поле кадра. Оно говорит ведомому устройству, какие данные или выполнение какого действия требует от него ведущее устройство;
 *
 * данные — поле содержит информацию, необходимую ведомому устройству для выполнения заданной мастером функции или содержит данные, передаваемые ведомым устройством
 * в ответ на запрос ведущего. Длина и формат поля зависит от номера функции, также в поле данных может быть детализация кода функции;
 *
 * блок обнаружения ошибок — контрольная сумма для проверки отсутствия ошибок в кадре.
 *
 * Максимальный размер ADU для последовательных сетей RS232/RS485 — 256 байт, для сетей TCP — 260 байт.
 *
 * Спецификация протокола определяет четыре таблицы данных:
 * Дискретные входы (Discrete Inputs)		один бит		только чтение
 * Регистры флагов (Coils)					один бит		чтение и запись
 * Регистры ввода (Input Registers)			16-битноеслово	только чтение
 * Регистры хранения (Holding Registers)	16-битноеслово	чтение и запись
 *
 * функции протокола Modbus:
 * 1 (0x01) — чтение значений из нескольких регистров флагов (Read Coil Status).
 * 2 (0x02) — чтение значений из нескольких дискретных входов (Read Discrete Inputs).
 * 3 (0x03) — чтение значений из нескольких регистров хранения (Read Holding Registers).
 * 4 (0x04) — чтение значений из нескольких регистров ввода (Read Input Registers).
 *
 * В ответе передаются запрошенные данные. Количество байт данных зависит от количества
 * запрошенных элементов. Перед данными передается один байт, значение которого равно количеству байт данных.
 * Значения регистров хранения и регистров ввода передаются начиная с указанного адреса, по два байта на регистр, старший байт каждого регистра передаётся первым:
 *
 * байт 1	байт 2	байт 3	байт 4	…	байт N-1	байт N
 * RA,1		RA,0	RA+1,1	RA+1,0	…	RA+Q-1,1	RA+Q-1,0
 *
 */



#ifndef MODBUS_H_
#define MODBUS_H_

/* ----------------------- Defines ------------------------------------------*/
#define MB_ADDRESS_BROADCAST    ( 0 )   /*! Modbus broadcast address. */
#define MB_ADDRESS_MIN          ( 1 )   /*! Smallest possible slave address. */
#define MB_ADDRESS_MAX          ( 247 ) /*! Biggest possible slave address. */
#define MB_FUNC_NONE                          (  0 )
#define MB_FUNC_READ_COILS                    (  1 )
#define MB_FUNC_READ_DISCRETE_INPUTS          (  2 )
#define MB_FUNC_WRITE_SINGLE_COIL             (  5 )
#define MB_FUNC_WRITE_MULTIPLE_COILS          ( 15 )
#define MB_FUNC_READ_HOLDING_REGISTER         (  3 )
#define MB_FUNC_READ_INPUT_REGISTER           (  4 )
#define MB_FUNC_WRITE_REGISTER                (  6 )
#define MB_FUNC_WRITE_MULTIPLE_REGISTERS      ( 16 )
#define MB_FUNC_READWRITE_MULTIPLE_REGISTERS  ( 23 )
#define MB_FUNC_DIAG_READ_EXCEPTION           (  7 )
#define MB_FUNC_DIAG_DIAGNOSTIC               (  8 )
#define MB_FUNC_DIAG_GET_COM_EVENT_CNT        ( 11 )
#define MB_FUNC_DIAG_GET_COM_EVENT_LOG        ( 12 )
#define MB_FUNC_OTHER_REPORT_SLAVEID          ( 17 )
#define MB_FUNC_ERROR                         ( 128 )


#define	MB_SlaveAddres							1


typedef struct					// для передачи через очереди структур.
{
  uint8_t 	MBSlaveAddr;
  uint8_t 	MBFunct;
  uint16_t 	MBData[252];
//  uint16_t 	MBCRC;
} MBFrame;


void Modbus_SendCmd(uint8_t MB_SlaveAddr, uint8_t MB_Funct, uint16_t addr, uint16_t numb, uint16_t *Data, uint16_t len);

#endif /* MODBUS_H_ */
